% verb/1
% pre-conditions: X is an atom
% post-conditions: true if X is one of the verbs from the production rules
verb(X) :- member(X, [put, pickup, stack, unstack]).

% det/1
% pre-conditions: X is an atom
% post-conditions: true if X is one of the determinants from the production rules
det(X) :- member(X, [the]).

% adj/1
% pre-conditions: X is an atom
% post-conditions: true if X is one of the adjectives from the production rules
adj(X) :- member(X, [big, small, green, red, yellow, blue]).

% noun/1
% pre-conditions: X is an atom
% post-conditions: true if X is one of the nouns from the production rules
noun(X) :- member(X, [block, table]).

% prep/1
% pre-conditions: X is an atom
% post-conditions: true if X is one of the prepositions from the production rules
prep(X) :- member(X, [on, from]).

% isGrammatical/1
% pre-conditions: L is a list that contains a sequence of words
% post-conditions: true if the sequence of words in L forms a sentence that can be generated by BlocksGrammar
isGrammatical(L) :- s(L).

% -------- helper predicates that translate the production rules of BlocksGrammar into Prolog rules -------- %
% s/1
% pre-conditions: L is a list
% post-conditions: true if the sequence of words in the list forms a sentence
s(L) :- vp(L).

% vp/1
% pre-conditions: [A|T] is a list
% post-conditions: true if the sequence of words in the list forms a verb phrase
vp([A|T]) :- verb(A), append(B,C,T), np(B), pp(C).

% np/1
% pre-conditions: [A,B] is a list / [A|T] is a list
% post-conditions: true if the sequence of words in the list forms a noun phrase
np([A,B]) :- det(A), noun(B).
np([A|T]) :- det(A), append(B,[C],T), adjp(B), noun(C).

% adjp/1
% pre-conditions: [A] is a list / [A|B] is a list
% post-conditions: true if the sequence of words in the list forms an adjective phrase
adjp([A]) :- adj(A).
adjp([A|B]) :- adj(A), adjp(B).

% pp/1
% pre-conditions: [A|B] is a list 
% post-conditions: true if the sequence of words in the list forms a preposition phrase
pp([A|B]) :- prep(A), np(B).
